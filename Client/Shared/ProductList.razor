@inject IProductService ProductService
@implements IDisposable

@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Meassage</span>
    
}
else
{
    <ul class="list-unstyled">
    @foreach (var product in ProductService.Products)
    {
        <li class="media my-3">
            <div class="card">
                <div class="card-body">
                    <div class="media-img-wrapper mr-3">
                        <a href="/product/@product.Id">
                            <img class="media-img" src="@product.ImageUrl" alt="@product.Title" style="max-width: 100px;" />
                        </a>
                    </div>
                    <div class="media-body">
                            <a href="/product/@product.Id">
                            <h4 class="mb-0">@product.Title</h4>
                        </a>
                        <p>@product.Description</p>
                        <h5 class="price">
                            Price: @GetPriceText(product)
                        </h5>
                    </div>
                </div>
            </div>
        </li>
    }
            
</ul>
}

@code {

    protected override void OnInitialized()
    {
        ProductService.ProductsChanged += StateHasChanged;
    }
    public void Dispose()
    {
        ProductService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return variants.First().Price.ToString("C");
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
		
   
}
